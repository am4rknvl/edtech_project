// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type ContentBlock interface {
	IsContentBlock()
	GetID() string
	GetOrder() int
}

type AnswerInput struct {
	QuestionID       string  `json:"questionId"`
	SelectedOptionID *string `json:"selectedOptionId,omitempty"`
	TextAnswer       *string `json:"textAnswer,omitempty"`
}

type Attempt struct {
	ID          string           `json:"id"`
	User        *User            `json:"user"`
	Quiz        *Quiz            `json:"quiz"`
	Score       int              `json:"score"`
	StartedAt   time.Time        `json:"startedAt"`
	SubmittedAt *time.Time       `json:"submittedAt,omitempty"`
	Answers     []*AttemptAnswer `json:"answers"`
}

type AttemptAnswer struct {
	ID               string    `json:"id"`
	Question         *Question `json:"question"`
	SelectedOptionID *string   `json:"selectedOptionId,omitempty"`
	TextAnswer       *string   `json:"textAnswer,omitempty"`
}

type AudioBlock struct {
	ID          string `json:"id"`
	Order       int    `json:"order"`
	URL         string `json:"url"`
	DurationSec *int   `json:"durationSec,omitempty"`
}

func (AudioBlock) IsContentBlock()    {}
func (this AudioBlock) GetID() string { return this.ID }
func (this AudioBlock) GetOrder() int { return this.Order }

type AudioBlockInput struct {
	URL         string `json:"url"`
	DurationSec *int   `json:"durationSec,omitempty"`
	Order       *int   `json:"order,omitempty"`
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type Course struct {
	ID        string       `json:"id"`
	Subject   *Subject     `json:"subject"`
	Grade     int          `json:"grade"`
	Title     string       `json:"title"`
	State     PublishState `json:"state"`
	CreatedAt time.Time    `json:"createdAt"`
}

type CreateCourseInput struct {
	SubjectID string `json:"subjectId"`
	Grade     int    `json:"grade"`
	Title     string `json:"title"`
}

type CreateLessonInput struct {
	UnitID     string      `json:"unitId"`
	Title      string      `json:"title"`
	Order      *int        `json:"order,omitempty"`
	Difficulty *Difficulty `json:"difficulty,omitempty"`
}

type CreateStudentProfileInput struct {
	Grade int  `json:"grade"`
	Age   *int `json:"age,omitempty"`
}

type CreateUnitInput struct {
	CourseID string `json:"courseId"`
	Title    string `json:"title"`
	Order    *int   `json:"order,omitempty"`
}

type CreateUploadURLInput struct {
	Mime     string `json:"mime"`
	Filename string `json:"filename"`
}

type ImageBlock struct {
	ID    string  `json:"id"`
	Order int     `json:"order"`
	URL   string  `json:"url"`
	Alt   *string `json:"alt,omitempty"`
}

func (ImageBlock) IsContentBlock()    {}
func (this ImageBlock) GetID() string { return this.ID }
func (this ImageBlock) GetOrder() int { return this.Order }

type ImageBlockInput struct {
	URL   string  `json:"url"`
	Alt   *string `json:"alt,omitempty"`
	Order *int    `json:"order,omitempty"`
}

type Lesson struct {
	ID         string         `json:"id"`
	Unit       *Unit          `json:"unit"`
	Title      string         `json:"title"`
	Order      int            `json:"order"`
	Difficulty *Difficulty    `json:"difficulty,omitempty"`
	State      PublishState   `json:"state"`
	Version    int            `json:"version"`
	Content    []ContentBlock `json:"content"`
	Quiz       *Quiz          `json:"quiz,omitempty"`
	CreatedAt  time.Time      `json:"createdAt"`
}

type LinkChildInput struct {
	ChildUserID string `json:"childUserId"`
}

type Mutation struct {
}

type Option struct {
	ID        string `json:"id"`
	Text      string `json:"text"`
	IsCorrect bool   `json:"isCorrect"`
}

type OptionInput struct {
	Text      string `json:"text"`
	IsCorrect bool   `json:"isCorrect"`
}

type ParentChild struct {
	ID        string    `json:"id"`
	Parent    *User     `json:"parent"`
	Child     *User     `json:"child"`
	CreatedAt time.Time `json:"createdAt"`
}

type Progress struct {
	ID         string         `json:"id"`
	User       *User          `json:"user"`
	Lesson     *Lesson        `json:"lesson"`
	Status     ProgressStatus `json:"status"`
	BestScore  *int           `json:"bestScore,omitempty"`
	LastSeenAt *time.Time     `json:"lastSeenAt,omitempty"`
}

type Query struct {
}

type Question struct {
	ID      string    `json:"id"`
	Type    string    `json:"type"`
	Prompt  string    `json:"prompt"`
	Options []*Option `json:"options,omitempty"`
}

type QuestionInput struct {
	Type    string         `json:"type"`
	Prompt  string         `json:"prompt"`
	Options []*OptionInput `json:"options,omitempty"`
}

type Quiz struct {
	ID        string      `json:"id"`
	LessonID  string      `json:"lessonId"`
	Questions []*Question `json:"questions"`
}

type QuizBlock struct {
	ID    string `json:"id"`
	Order int    `json:"order"`
	Quiz  *Quiz  `json:"quiz"`
}

func (QuizBlock) IsContentBlock()    {}
func (this QuizBlock) GetID() string { return this.ID }
func (this QuizBlock) GetOrder() int { return this.Order }

type SignInInput struct {
	Email    *string `json:"email,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	Otp      *string `json:"otp,omitempty"`
	Password *string `json:"password,omitempty"`
}

type SignUpInput struct {
	Role        Role    `json:"role"`
	Email       *string `json:"email,omitempty"`
	Phone       *string `json:"phone,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Password    *string `json:"password,omitempty"`
}

type StudentProfile struct {
	ID        string    `json:"id"`
	User      *User     `json:"user"`
	Grade     int       `json:"grade"`
	Age       *int      `json:"age,omitempty"`
	Prefs     *string   `json:"prefs,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
}

type Subject struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Submission struct {
	ID        string       `json:"id"`
	Lesson    *Lesson      `json:"lesson"`
	Author    *User        `json:"author"`
	Reviewer  *User        `json:"reviewer,omitempty"`
	Notes     *string      `json:"notes,omitempty"`
	State     PublishState `json:"state"`
	UpdatedAt time.Time    `json:"updatedAt"`
}

type SubmitQuizInput struct {
	QuizID  string         `json:"quizId"`
	Answers []*AnswerInput `json:"answers"`
}

type Subscription struct {
}

type TeacherProfile struct {
	ID        string     `json:"id"`
	User      *User      `json:"user"`
	Subjects  []*Subject `json:"subjects"`
	Grades    []int      `json:"grades"`
	Bio       *string    `json:"bio,omitempty"`
	CreatedAt time.Time  `json:"createdAt"`
}

type TextBlock struct {
	ID    string `json:"id"`
	Order int    `json:"order"`
	Text  string `json:"text"`
}

func (TextBlock) IsContentBlock()    {}
func (this TextBlock) GetID() string { return this.ID }
func (this TextBlock) GetOrder() int { return this.Order }

type TextBlockInput struct {
	Text  string `json:"text"`
	Order *int   `json:"order,omitempty"`
}

type Unit struct {
	ID     string  `json:"id"`
	Course *Course `json:"course"`
	Title  string  `json:"title"`
	Order  int     `json:"order"`
}

// Authenticated account. For STUDENT children accounts, link via ParentChild.
type User struct {
	ID          string    `json:"id"`
	Role        Role      `json:"role"`
	Email       *string   `json:"email,omitempty"`
	Phone       *string   `json:"phone,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
}

type VideoBlock struct {
	ID          string `json:"id"`
	Order       int    `json:"order"`
	URL         string `json:"url"`
	DurationSec *int   `json:"durationSec,omitempty"`
}

func (VideoBlock) IsContentBlock()    {}
func (this VideoBlock) GetID() string { return this.ID }
func (this VideoBlock) GetOrder() int { return this.Order }

type VideoBlockInput struct {
	URL         string `json:"url"`
	DurationSec *int   `json:"durationSec,omitempty"`
	Order       *int   `json:"order,omitempty"`
}

type Difficulty string

const (
	DifficultyBeginner     Difficulty = "BEGINNER"
	DifficultyIntermediate Difficulty = "INTERMEDIATE"
	DifficultyAdvanced     Difficulty = "ADVANCED"
)

var AllDifficulty = []Difficulty{
	DifficultyBeginner,
	DifficultyIntermediate,
	DifficultyAdvanced,
}

func (e Difficulty) IsValid() bool {
	switch e {
	case DifficultyBeginner, DifficultyIntermediate, DifficultyAdvanced:
		return true
	}
	return false
}

func (e Difficulty) String() string {
	return string(e)
}

func (e *Difficulty) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Difficulty(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Difficulty", str)
	}
	return nil
}

func (e Difficulty) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Difficulty) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Difficulty) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProgressStatus string

const (
	ProgressStatusNotStarted ProgressStatus = "NOT_STARTED"
	ProgressStatusInProgress ProgressStatus = "IN_PROGRESS"
	ProgressStatusCompleted  ProgressStatus = "COMPLETED"
)

var AllProgressStatus = []ProgressStatus{
	ProgressStatusNotStarted,
	ProgressStatusInProgress,
	ProgressStatusCompleted,
}

func (e ProgressStatus) IsValid() bool {
	switch e {
	case ProgressStatusNotStarted, ProgressStatusInProgress, ProgressStatusCompleted:
		return true
	}
	return false
}

func (e ProgressStatus) String() string {
	return string(e)
}

func (e *ProgressStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgressStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgressStatus", str)
	}
	return nil
}

func (e ProgressStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProgressStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProgressStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PublishState string

const (
	PublishStateDraft            PublishState = "DRAFT"
	PublishStateInReview         PublishState = "IN_REVIEW"
	PublishStateChangesRequested PublishState = "CHANGES_REQUESTED"
	PublishStatePublished        PublishState = "PUBLISHED"
	PublishStateArchived         PublishState = "ARCHIVED"
)

var AllPublishState = []PublishState{
	PublishStateDraft,
	PublishStateInReview,
	PublishStateChangesRequested,
	PublishStatePublished,
	PublishStateArchived,
}

func (e PublishState) IsValid() bool {
	switch e {
	case PublishStateDraft, PublishStateInReview, PublishStateChangesRequested, PublishStatePublished, PublishStateArchived:
		return true
	}
	return false
}

func (e PublishState) String() string {
	return string(e)
}

func (e *PublishState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PublishState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PublishState", str)
	}
	return nil
}

func (e PublishState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PublishState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PublishState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleStudent Role = "STUDENT"
	RoleParent  Role = "PARENT"
	RoleTeacher Role = "TEACHER"
	RoleAdmin   Role = "ADMIN"
)

var AllRole = []Role{
	RoleStudent,
	RoleParent,
	RoleTeacher,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleStudent, RoleParent, RoleTeacher, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
