package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/am4rknvl/edtech_project/graph/model"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, input model.SignUpInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: SignUp - signUp"))
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: SignIn - signIn"))
}

// CreateStudentProfile is the resolver for the createStudentProfile field.
func (r *mutationResolver) CreateStudentProfile(ctx context.Context, input model.CreateStudentProfileInput) (*model.StudentProfile, error) {
	panic(fmt.Errorf("not implemented: CreateStudentProfile - createStudentProfile"))
}

// LinkChild is the resolver for the linkChild field.
func (r *mutationResolver) LinkChild(ctx context.Context, input model.LinkChildInput) (*model.ParentChild, error) {
	panic(fmt.Errorf("not implemented: LinkChild - linkChild"))
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.CreateCourseInput) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: CreateCourse - createCourse"))
}

// CreateUnit is the resolver for the createUnit field.
func (r *mutationResolver) CreateUnit(ctx context.Context, input model.CreateUnitInput) (*model.Unit, error) {
	panic(fmt.Errorf("not implemented: CreateUnit - createUnit"))
}

// CreateLesson is the resolver for the createLesson field.
func (r *mutationResolver) CreateLesson(ctx context.Context, input model.CreateLessonInput) (*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: CreateLesson - createLesson"))
}

// AddTextBlock is the resolver for the addTextBlock field.
func (r *mutationResolver) AddTextBlock(ctx context.Context, lessonID string, input model.TextBlockInput) (*model.TextBlock, error) {
	panic(fmt.Errorf("not implemented: AddTextBlock - addTextBlock"))
}

// AddImageBlock is the resolver for the addImageBlock field.
func (r *mutationResolver) AddImageBlock(ctx context.Context, lessonID string, input model.ImageBlockInput) (*model.ImageBlock, error) {
	panic(fmt.Errorf("not implemented: AddImageBlock - addImageBlock"))
}

// AddAudioBlock is the resolver for the addAudioBlock field.
func (r *mutationResolver) AddAudioBlock(ctx context.Context, lessonID string, input model.AudioBlockInput) (*model.AudioBlock, error) {
	panic(fmt.Errorf("not implemented: AddAudioBlock - addAudioBlock"))
}

// AddVideoBlock is the resolver for the addVideoBlock field.
func (r *mutationResolver) AddVideoBlock(ctx context.Context, lessonID string, input model.VideoBlockInput) (*model.VideoBlock, error) {
	panic(fmt.Errorf("not implemented: AddVideoBlock - addVideoBlock"))
}

// CreateQuiz is the resolver for the createQuiz field.
func (r *mutationResolver) CreateQuiz(ctx context.Context, lessonID string, questions []*model.QuestionInput) (*model.Quiz, error) {
	panic(fmt.Errorf("not implemented: CreateQuiz - createQuiz"))
}

// SubmitForReview is the resolver for the submitForReview field.
func (r *mutationResolver) SubmitForReview(ctx context.Context, lessonID string) (*model.Submission, error) {
	panic(fmt.Errorf("not implemented: SubmitForReview - submitForReview"))
}

// ApproveSubmission is the resolver for the approveSubmission field.
func (r *mutationResolver) ApproveSubmission(ctx context.Context, lessonID string) (*model.Submission, error) {
	panic(fmt.Errorf("not implemented: ApproveSubmission - approveSubmission"))
}

// PublishLesson is the resolver for the publishLesson field.
func (r *mutationResolver) PublishLesson(ctx context.Context, lessonID string) (*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: PublishLesson - publishLesson"))
}

// StartLesson is the resolver for the startLesson field.
func (r *mutationResolver) StartLesson(ctx context.Context, lessonID string) (*model.Progress, error) {
	panic(fmt.Errorf("not implemented: StartLesson - startLesson"))
}

// CompleteLesson is the resolver for the completeLesson field.
func (r *mutationResolver) CompleteLesson(ctx context.Context, lessonID string, score *int) (*model.Progress, error) {
	panic(fmt.Errorf("not implemented: CompleteLesson - completeLesson"))
}

// SubmitQuiz is the resolver for the submitQuiz field.
func (r *mutationResolver) SubmitQuiz(ctx context.Context, input model.SubmitQuizInput) (*model.Attempt, error) {
	panic(fmt.Errorf("not implemented: SubmitQuiz - submitQuiz"))
}

// CreateUploadURL is the resolver for the createUploadUrl field.
func (r *mutationResolver) CreateUploadURL(ctx context.Context, input model.CreateUploadURLInput) (string, error) {
	panic(fmt.Errorf("not implemented: CreateUploadURL - createUploadUrl"))
}

// Viewer is the resolver for the viewer field.
func (r *queryResolver) Viewer(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Viewer - viewer"))
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*model.Subject, error) {
	panic(fmt.Errorf("not implemented: Subjects - subjects"))
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context, grade *int, subjectID *string, state *model.PublishState) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	panic(fmt.Errorf("not implemented: Course - course"))
}

// Units is the resolver for the units field.
func (r *queryResolver) Units(ctx context.Context, courseID string) ([]*model.Unit, error) {
	panic(fmt.Errorf("not implemented: Units - units"))
}

// Lessons is the resolver for the lessons field.
func (r *queryResolver) Lessons(ctx context.Context, unitID string, state *model.PublishState) ([]*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: Lessons - lessons"))
}

// Lesson is the resolver for the lesson field.
func (r *queryResolver) Lesson(ctx context.Context, id string) (*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: Lesson - lesson"))
}

// RecommendedLessons is the resolver for the recommendedLessons field.
func (r *queryResolver) RecommendedLessons(ctx context.Context, grade int) ([]*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: RecommendedLessons - recommendedLessons"))
}

// SearchLessons is the resolver for the searchLessons field.
func (r *queryResolver) SearchLessons(ctx context.Context, q string, grade *int) ([]*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: SearchLessons - searchLessons"))
}

// MyProgress is the resolver for the myProgress field.
func (r *queryResolver) MyProgress(ctx context.Context, courseID *string) ([]*model.Progress, error) {
	panic(fmt.Errorf("not implemented: MyProgress - myProgress"))
}

// ProgressByLesson is the resolver for the progressByLesson field.
func (r *queryResolver) ProgressByLesson(ctx context.Context, lessonID string, userID *string) (*model.Progress, error) {
	panic(fmt.Errorf("not implemented: ProgressByLesson - progressByLesson"))
}

// MyDraftLessons is the resolver for the myDraftLessons field.
func (r *queryResolver) MyDraftLessons(ctx context.Context) ([]*model.Lesson, error) {
	panic(fmt.Errorf("not implemented: MyDraftLessons - myDraftLessons"))
}

// Submissions is the resolver for the submissions field.
func (r *queryResolver) Submissions(ctx context.Context, state *model.PublishState) ([]*model.Submission, error) {
	panic(fmt.Errorf("not implemented: Submissions - submissions"))
}

// ChildProgress is the resolver for the childProgress field.
func (r *queryResolver) ChildProgress(ctx context.Context, childUserID string) ([]*model.Progress, error) {
	panic(fmt.Errorf("not implemented: ChildProgress - childProgress"))
}

// ProgressUpdated is the resolver for the progressUpdated field.
func (r *subscriptionResolver) ProgressUpdated(ctx context.Context, userID string) (<-chan *model.Progress, error) {
	panic(fmt.Errorf("not implemented: ProgressUpdated - progressUpdated"))
}

// SubmissionStatusChanged is the resolver for the submissionStatusChanged field.
func (r *subscriptionResolver) SubmissionStatusChanged(ctx context.Context, lessonID string) (<-chan *model.Submission, error) {
	panic(fmt.Errorf("not implemented: SubmissionStatusChanged - submissionStatusChanged"))
}

// NotificationReceived is the resolver for the notificationReceived field.
func (r *subscriptionResolver) NotificationReceived(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: NotificationReceived - notificationReceived"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
